//- @pugdoc
    name: button 
    options:
        - {string} title
        - {string} icon
        - {string} caret
        - {string} url
        - {string} labelFor
        - {bool} disabled
        - {string} size
        - {bool} plain
        - {bool} main
        - {string} toggle
        - {string} name
        - {string} value
        - {bool} checked
        - {string} hint
        - {string} contentTemplate
        - {string} iconClass
        - {string} titleClass
        - {string} caretClass        

- fastredRequire('arr', 'css', 'template', 'var')

- size = arrGetFound(['s', 'l', 'xl'], options.size)
- attributes.class = cssBemClassArr(attributes.class, {'button_plain': options.plain, 'button_main': options.main, 'button_disabled': options.disabled, 'button_size_': options.size, 'button_cut_': options.cut})
- tabindex = options.disabled ? -1 : 0
- labelFor = options.labelFor
- contentTemplate = varIsNotEmpty(options.contentTemplate) ? options.contentTemplate : 'button__content'
- pressed = options.checked

if varIsEmpty(labelFor)
    if arrIncludes(['radio', 'checkbox'], options.toggle)
        - fastredRequire('int')
        - labelFor = 'button_' + intCounter()
        - pressed = false

        input.button__input(id=labelFor type=options.toggle name=options.name value=options.value checked=options.checked)

- attributes.class = cssBemClassArr(attributes.class, {'button_pressed': pressed})

if varIsNotEmpty(labelFor)
    label.button(for=labelFor role='button' tabindex=tabindex title=options.hint)&attributes(attributes)
        != templateToHtml(contentTemplate, options)
else if varIsStr(options.url)
    a.button(href=options.url role='link' tabindex=tabindex title=options.hint)&attributes(attributes)
        != templateToHtml(contentTemplate, options)
else
    button.button(disabled=options.disabled title=options.hint)&attributes(attributes)
        != templateToHtml(contentTemplate, options)
